LIBS = support irreader ipo bitwriter bitreader
CONFIG = llvm-config
CXX    = clang++
CC     = clang
LDFLAGS = $(shell $(CONFIG) --ldflags --system-libs --libs $(LIBS))
CXXFLAGS = $(shell $(CONFIG) --cxxflags) -O0 -g
CCFLAGS = $(shell $(CONFIG) --cflags) -O0 -g
SRC_DIR = src
BIN_DIR = bin
OBJ_DIR = obj
TOOLS = extract-loops instrument-loops instrument-invos create-server autotune
NATIVE_OBJS = prof.o
BC_OBJS = prof.bc server.bc invos.bc LoopExtractionPolicy.bc

EXES = $(TOOLS:%=$(BIN_DIR)/%)
OBJS = $(BC_OBJS:%=$(OBJ_DIR)/%) $(NATIVE_OBJS:%=$(OBJ_DIR)/%)

.PHONY: all clean build_obj build_exe
.PRECIOUS: %.o %.bc

all: build_obj build_exe

# Separate dependences on header files so they are not added to compile cmd
$(BC_OBJS) $(OBJS): $(SRC_DIR)/common.h $(SRC_DIR)/LoopCallProfile.h

build_exe:
	mkdir -p $(BIN_DIR) 
	$(MAKE) $(EXES)

build_obj:
	mkdir -p $(OBJ_DIR)
	$(MAKE) $(OBJS) $(BC_OBJS)

obj/%.bc: $(SRC_DIR)/%.cpp
	$(CXX) $< $(CXXFLAGS) -c -emit-llvm
	mv -f $(@F) obj/

obj/%.bc: $(SRC_DIR)/%.c
	$(CC) $< -O0 -c -emit-llvm
	mv -f $(@F) obj/

obj/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $< $(CXXFLAGS) -c -o $@

obj/%.o: $(SRC_DIR)/%.c
	$(CC) $< $(CCFLAGS) -c -o $@

bin/%: obj/%.o
	$(CXX) $^ $(LDFLAGS) -o $@

bin/autotune: $(SRC_DIR)/autotune.go
	go build -o $@ $^

clean:
	rm -rf *.o $(EXES) $(OBJS)
