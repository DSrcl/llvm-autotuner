LIBS = support irreader ipo bitwriter bitreader
CONFIG = llvm-config
CXX    = clang++
CC     = clang
LDFLAGS = $(shell $(CONFIG) --ldflags --system-libs --libs $(LIBS) | sed 's/-DNDEBUG//g')
CXXFLAGS = $(shell $(CONFIG) --cxxflags | sed 's/-DNDEBUG//g') -O0 -g
CCFLAGS = $(shell $(CONFIG) --cflags | sed 's/-DNDEBUG//g') -O0 -g
SRC_DIR = src
BIN_DIR = bin
OBJ_DIR = obj
TOOLS = create-policy extract-loops instrument-loops instrument-invos create-server autotune
LIBS2 := extract
SRCS = $(wildcard $(SRC_DIR)/*.cpp)
#BC_OBJS = prof.bc LoopName.bc server.bc invos.bc create-policy.bc LoopExtractionPolicy.bc
BC_OBJS = $(SRCS:$(SRC_DIR)/%.cpp=%.bc)

EXES = $(TOOLS:%=$(BIN_DIR)/%)
OBJS = $(BC_OBJS:%.bc=$(OBJ_DIR)/%.o)

.PHONY: all clean build_obj build_libs build_exe
.PRECIOUS: %.o %.bc %.a

all: build_obj build_libs build_exe

# Separate dependences on header files so they are not added to compile cmd
HEADERS = $(wildcard SRC_DIR/*.h)
$(BC_OBJS) $(OBJS): $(HEADERS)

build_exe:
	mkdir -p $(BIN_DIR) 
	$(MAKE) $(EXES)

build_obj:
	mkdir -p $(OBJ_DIR)
	$(MAKE) $(OBJS) $(BC_OBJS)

build_libs:
	mkdir -p $(OBJ_DIR)
	$(MAKE) $(LIBS2:%=$(OBJ_DIR)/lib%.a)

obj/%.bc: $(SRC_DIR)/%.cpp
	$(CXX) $< $(CXXFLAGS) -c -emit-llvm
	mv -f $(@F) obj/

obj/%.bc: $(SRC_DIR)/%.c
	$(CC) $< -O0 -c -emit-llvm
	mv -f $(@F) obj/

obj/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $< $(CXXFLAGS) -c -o $@

obj/%.o: $(SRC_DIR)/%.c
	$(CC) $< $(CCFLAGS) -c -o $@

obj/%.a: $(OBJS)
	 $(AR) rv $@ $^

bin/%: obj/%.o $(LIBS2:%=obj/lib%.a)
	$(CXX) $< -Lobj -l$(LIBS2) $(LDFLAGS) -o $@

bin/autotune: $(SRC_DIR)/autotune.go
	go build -o $@ $^

clean:
	rm -rf *.o $(EXES) $(OBJS) $(LIBS2:%=$(OBJ_DIR)/lib%.a)
